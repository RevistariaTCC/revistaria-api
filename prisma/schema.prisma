datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  collectionIDs String[]     @db.ObjectId
  collections   Collection[] @relation(fields: [collectionIDs], references: [id])
}

enum VolumeStatus {
  AVAILABLE
  UNAVAILABLE
}

model Volume {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  status       VolumeStatus @default(AVAILABLE)
  collection   Collection   @relation(fields: [collectionId], references: [id])
  collectionId String       @db.ObjectId
}

model Collection {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  image             String
  collectionGroup   CollectionGroup? @relation(fields: [collectionGroupId], references: [id])
  collectionGroupId String?          @db.ObjectId
  categoryIDs       String[]         @db.ObjectId
  categories        Category[]       @relation(fields: [categoryIDs], references: [id])
  volumes           Volume[]
  userIDs           String[]         @db.ObjectId
  users             User[]           @relation(fields: [userIDs], references: [id])
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String
  phone         String
  passwordHash  String
  colectionIDs  String[]       @db.ObjectId
  collections   Collection[]   @relation(fields: [colectionIDs], references: [id])
  notifications Notification[]
}

model Notification {
  id     String             @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  text   String
  status NotificationStatus @default(UNREAD)
  type   NotificationType   @default(NEW_VOLUME)
  user   User               @relation(fields: [userId], references: [id])
  userId String             @db.ObjectId
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationType {
  NEW_VOLUME
  NEW_INTEREST
}

// O nome será a junção dos nomes das 3 primeiras coleções seguido por um "etc".
model CollectionGroup {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  collections Collection[]
}
