// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id   String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name        String
  collections Collection[]
  users User[]
}

enum VolumeStatus {
  AVAILABLE
  UNAVAILABLE
}

model Volume {
  id           String @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       VolumeStatus @default(UNAVAILABLE)
  collection   Collection   @relation(fields: [collectionId], references: [id])
  collectionId String
  title        String
  image        String
  synopsis     String
  units Int @default(0)
  reservations Reservation[]
}

model Collection {
  id   String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name              String
  image             String
  collectionGroup   CollectionGroup? @relation(fields: [collectionGroupId], references: [id])
  categories        Category[]
  volumes           Volume[]
  users             User[]
  collectionGroupId String?
  description       String
}

model User {
  id   String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name          String
  phone         String
  passwordHash  String
  collections   Collection[]
  notifications Notification[]
  interests Category[]
  birthdate DateTime
  newsletter Boolean
  reservations Reservation[]
  cpf         String         @unique
}

model ActivationCode {
  id   String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code String
  phone String
  used Boolean @default(false)
  expired Boolean @default(false)
}

model Notification {
  id   String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title  String
  text   String
  status NotificationStatus @default(UNREAD)
  type   NotificationType   @default(NEW_VOLUME)
  user   User               @relation(fields: [userId], references: [id])
  userId String
  data String?
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationType {
  NEW_VOLUME
  NEW_INTEREST
  NEW_RESERVATION
}

// O nome será a junção dos nomes das 3 primeiras coleções seguido por um "etc".
model CollectionGroup {
  id   String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  collections Collection[]
}

model Reservation {
  id   String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  volume Volume @relation(fields: [volumeId], references: [id])
  volumeId String
  claimed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  claimedDate DateTime?
}
